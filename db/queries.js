// var pool = require("./pool")

// exports.query =(queryText, queryValues)=>{
//    return new Promise((resolve,reject)=>{
//     pool.query(queryText, queryValues)
//     .then(res => {
//       resolve(res)
//     })
//     .catch(error => {
//       reject(error)
//     })
//   })


// }

exports.queryList = {
  GET_STORE_LIST : ' SELECT STORE_ID, STORE_NAME, STORE_CODE, CREATED_ON, CREATED_BY FROM BMS.STORE ',

  SAVA_STORE_QUERY: ' INSERT INTO BMS.STORE(STORE_NAME, STORE_CODE, CREATED_BY,CREATED_ON, ADDRESS) VALUES($1, $2,$3, $4, $5)',
  
  GET_BOOK_LIST :' SELECT BOOK_ID, BOOK_TITLE, BOOK_AUTHOR, BOOK_PUBLISHER FROM BMS.BOOK',
  
  GET_BOOK_DETAILS :` SELECT BOOK_ID, BOOK_TITLE, BOOK_DESCRIPTION, BOOK_AUTHOR, BOOK_PUBLISHER, BOOK_PAGES,BOOK.STORE_CODE,STORE.STORE_NAME ,STORE.ADDRESS 
                     FROM BMS.BOOK INNER JOIN BMS.STORE ON BOOK.STORE_CODE = STORE.STORE_CODE
                     WHERE BOOK_ID = $1`,
 
  SAVA_BOOK_QUERY: ` INSERT INTO BMS.BOOK (BOOK_TITLE, BOOK_DESCRIPTION, BOOK_AUTHOR, BOOK_PUBLISHER, BOOK_PAGES, STORE_CODE, CREATED_BY,CREATED_ON) VALUES('', '', '', '', 0, '', '', '');`,
  
  UPDATE_BOOK_QUERY:` UPDATE BMS.BOOK
                     SET BOOK_TITLE=$1, BOOK_DESCRIPTION=$2, BOOK_AUTHOR=$3, BOOK_PUBLISHER=$4, BOOK_PAGES=$5, STORE_CODE=$6, CREATED_BY=$7, CREATED_ON=$8
                     WHERE BOOK_ID= $9`,
  
  DELETE_BOOK_QUERY:` DELETE FROM BMS.BOOK WHERE BOOK_ID=$1`,

  AUDIY_QUERY : ' INSERT INTO BMS.APP_AUDIT(AUDITACTION, AUDITDATA,AUDITSTATUS, AUDITERROR,AUDITBY, AUDITON)VALUES($1, $2, $3, $4, $5, $6)',

  GET_USER_LIST_QUERY : ` SELECT USER_ID, USERNAME, EMAIL, USER_TYPE_CODE, FULL_NAME, ACTIVE FROM BMS.APP_USER    `,

  IS_USER_EXISTS_QUERY : ` SELECT COUNT(USER_ID) FROM BMS.APP_USER WHERE LOWER(USERNAME) =LOWER($1) OR LOWER(EMAIL)=LOWER($2) `,

  SAVE_USER_QUERY : ` INSERT INTO BMS.APP_USER (USERNAME, PASSWORD, EMAIL, USER_TYPE_CODE, FULL_NAME, CREATED_ON, CREATED_BY) VALUES($1, $2, $3, $4, $5, $6, $7)  returning *  `,

}